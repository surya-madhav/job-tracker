generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  jobs     Job[]
  contacts Contact[]
  resumes  Resume[]

  @@map("users")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  website   String?
  industry  String?
  location  String?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  jobs     Job[]
  contacts Contact[]

  @@map("companies")
}

model Job {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  title           String
  companyId       String?   @map("company_id")
  url             String?
  status          JobStatus @default(SAVED)
  applicationDate DateTime? @map("application_date")
  resumeId        String?   @map("resume_id")
  notes           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])
  resume  Resume?  @relation(fields: [resumeId], references: [id])

  @@index([userId])
  @@index([companyId])
  @@index([resumeId])
  @@map("jobs")
}

model Contact {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  companyId   String?  @map("company_id")
  name        String
  position    String?
  email       String?
  phone       String?
  linkedinUrl String?  @map("linkedin_url")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])

  @@index([userId])
  @@index([companyId])
  @@map("contacts")
}

model Resume {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  tags      String?
  fileUrl   String?  @map("file_url")
  jsonData  Json?    @map("json_data")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User  @relation(fields: [userId], references: [id])
  jobs Job[]

  @@index([userId])
  @@map("resumes")
}

enum JobStatus {
  SAVED
  APPLIED
  INTERVIEWING
  OFFERED
  REJECTED

  @@map("job_status")
}